{
	"info": {
		"_postman_id": "e2dd73ab-b645-4b14-b01c-b06e76cf2dd7",
		"name": "QA_Assement_Wema",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13432229"
	},
	"item": [
		{
			"name": "Create Employer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"success\",\r\n    \"data\": {\r\n        \"name\": \"Sample Name\",\r\n        \"salary\": \"1230999\",\r\n        \"age\": \"52\",\r\n        \"id\": 25\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/create",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch All Employee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://dummy.restapiexample.com/api/v1/employees",
					"protocol": "http",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch One Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Helper function to handle retries\r",
							"function retryRequest() {\r",
							"    const retryCount = parseInt(pm.variables.get('retryCount'), 10);\r",
							"    const maxRetries = 3; // Define your maximum retries\r",
							"    const retryDelay = 3000; // Delay between retries in milliseconds\r",
							"\r",
							"    if (retryCount < maxRetries) {\r",
							"        console.log(`Retrying request... Attempt ${retryCount + 1}`);\r",
							"        pm.variables.set('retryCount', retryCount + 1);\r",
							"        \r",
							"        setTimeout(() => {\r",
							"            pm.sendRequest(pm.request, (err, res) => {\r",
							"                if (err) {\r",
							"                    console.error(`Error during retry: ${err}`);\r",
							"                } else {\r",
							"                    pm.response.to = res;\r",
							"                    if (res.code === 429) {\r",
							"                        retryRequest();\r",
							"                    } else {\r",
							"                        // Reset retry count if successful or non-429 status code\r",
							"                        pm.variables.unset('retryCount');\r",
							"                        validateResponse(res);\r",
							"                    }\r",
							"                }\r",
							"            });\r",
							"        }, retryDelay);\r",
							"    } else {\r",
							"        pm.variables.unset('retryCount');\r",
							"        console.error(`Request failed after ${maxRetries} retries.`);\r",
							"    }\r",
							"}\r",
							"\r",
							"// Function to validate the response\r",
							"function validateResponse(res) {\r",
							"    const responseData = res.json();\r",
							"\r",
							"    // Validate status code\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    // Validate response structure\r",
							"    pm.test(\"Response structure is correct\", function () {\r",
							"        pm.expect(responseData).to.have.property(\"status\", \"success\");\r",
							"        pm.expect(responseData).to.have.property(\"data\").that.is.an(\"array\");\r",
							"        pm.expect(responseData).to.have.property(\"message\", \"Successfully! All records has been fetched.\");\r",
							"    });\r",
							"\r",
							"    // Validate data is an array with correct length\r",
							"    pm.test(\"Response data is a non-empty array\", function () {\r",
							"        pm.expect(responseData.data).to.be.an(\"array\").that.is.not.empty;\r",
							"        pm.expect(responseData.data.length).to.eql(24); // Validate the expected number of employees\r",
							"    });\r",
							"\r",
							"    // Validate response data types and content\r",
							"    pm.test(\"Validate data types and content in response\", function () {\r",
							"        responseData.data.forEach(employee => {\r",
							"            pm.expect(employee).to.have.property(\"id\").that.is.a(\"number\");\r",
							"            pm.expect(employee).to.have.property(\"employee_name\").that.is.a(\"string\");\r",
							"            pm.expect(employee).to.have.property(\"employee_salary\").that.is.a(\"number\");\r",
							"            pm.expect(employee).to.have.property(\"employee_age\").that.is.a(\"number\");\r",
							"            pm.expect(employee).to.have.property(\"profile_image\").that.is.a(\"string\");\r",
							"        });\r",
							"    });\r",
							"\r",
							"    // Validate specific fields are not empty\r",
							"    pm.test(\"Validate id, employee_name, employee_salary, and employee_age are not empty\", function () {\r",
							"        responseData.data.forEach(employee => {\r",
							"            pm.expect(employee.id).to.be.a(\"number\").and.to.not.be.null;\r",
							"            pm.expect(employee.employee_name).to.be.a(\"string\").and.to.not.be.empty;\r",
							"            pm.expect(employee.employee_salary).to.be.a(\"number\").and.to.not.be.null;\r",
							"            pm.expect(employee.employee_age).to.be.a(\"number\").and.to.not.be.null;\r",
							"        });\r",
							"    });\r",
							"\r",
							"    // Validate no duplicate employee IDs\r",
							"    pm.test(\"Check for duplicate employee IDs\", function () {\r",
							"        let ids = responseData.data.map(employee => employee.id);\r",
							"        let uniqueIds = new Set(ids);\r",
							"        pm.expect(ids.length).to.eql(uniqueIds.size);\r",
							"    });\r",
							"\r",
							"    // Validate response time\r",
							"    pm.test(\"Response time is less than 200ms\", function () {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Execute the test and retry logic\r",
							"if (pm.response.code === 429) {\r",
							"    retryRequest();\r",
							"} else {\r",
							"    pm.variables.unset('retryCount');\r",
							"    validateResponse(pm.response);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/employee/1",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employee",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "Sample Name",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "1230999",
			"type": "string"
		},
		{
			"key": "age",
			"value": "52",
			"type": "string"
		},
		{
			"key": "id",
			"value": "25",
			"type": "string"
		}
	]
}